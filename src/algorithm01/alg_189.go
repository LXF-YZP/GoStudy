package algorithm01

// 给定一个数组，将数组中的元素向右移动 k 个位置，其中 k 是非负数。

// 示例 1:

// 输入: [1,2,3,4,5,6,7] 和 k = 3
// 输出: [5,6,7,1,2,3,4]
// 解释:
// 向右旋转 1 步: [7,1,2,3,4,5,6]
// 向右旋转 2 步: [6,7,1,2,3,4,5]
// 向右旋转 3 步: [5,6,7,1,2,3,4]
// 示例 2:

// 输入: [-1,-100,3,99] 和 k = 2
// 输出: [3,99,-1,-100]
// 解释:
// 向右旋转 1 步: [99,-1,-100,3]
// 向右旋转 2 步: [3,99,-1,-100]
// 说明:

// 尽可能想出更多的解决方案，至少有三种不同的方法可以解决这个问题。
// 要求使用空间复杂度为 O(1) 的 原地 算法。

func rotate(nums []int, k int) {

	//原来[1,2,3,4,5,6,7]
	// 向右旋转 1 步: [7,1,2,3,4,5,6]
	// 向右旋转 2 步: [6,7,1,2,3,4,5]
	// 向右旋转 3 步: [5,6,7,1,2,3,4]

	// var i = len(nums)
	// k = k % len(nums)//k有可能会大于数组长度
	// copy(nums, append(nums[i-k:], nums[0:i-k]...))

	//方法二只需要反转全部元素，然后再反转前K个元素，再反转后面的l-k个元素
	//原来[1,2,3,4,5,6,7]  int = 3
	k = k % len(nums)
	rollbackArray(nums, 0, len(nums)-1)
	rollbackArray(nums, 0, k-1)
	rollbackArray(nums, k, len(nums)-1)
}

func rollbackArray(nums []int, i int, j int) []int {

	for i < j {
		nums[i], nums[j] = nums[j], nums[i]
		i++
		j--
	}
	return nums
}
